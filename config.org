#+title: Emacs Configuration

#+author: Rodrigo Santa Cruz
#+property: header-args:emacs-lisp :tangle ./init.el
#+startup: content

* Optimizations

  Make startup faster by reducing the frequency of garbage collection

  #+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gs-cons-percentage 0.6)
  #+end_src

  Reset garbage collection after startup

  #+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216 ; 16 mb
                    gs-cons-percentage 0.1)))
  #+end_src

  Raise gc-cons-threshold while the minibuffer is active, so the GC doesn’t slow
  down expensive commands (or completion frameworks, like helm and ivy)

  #+begin_src emacs-lisp
  (defun rst/defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun rst/restore-garbage-collection-h ()
    ;; Defer it so that commands launched immediately after will enjoy the
    ;; benefits.
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold 16777216))))

  (add-hook 'minibuffer-setup-hook #'rst/defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'rst/restore-garbage-collection-h)
  #+end_src

  Emacs resizes the (GUI) frame when your newly set font is larger
  (or smaller) than the system default

  #+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t)
  #+end_src

  To fix mac OS flickering problem, install the version in this [[https://github.com/railwaycat/homebrew-emacsmacport][repo]]
  Command to install is =brew cask install emacs-mac=

  Some bugs are solved if we don't turn off =menu-bar-mode= ([[  https://github.com/railwaycat/homebrew-emacsmacport/issues/124][github issue]])

* Package System Setup

  Initialize package

  #+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  #+end_src

  Install =use-package= and configure it to always ensure packages

  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t
        use-package-verbose t)
  #+end_src

* General

  Setup default directory

  #+begin_src emacs-lisp
  (setq default-directory "~/")
  #+end_src

  Merge system clipboard with emacs kill ring

  #+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
  #+end_src

  Move backup and auto-save files to tmp

  #+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  #+end_src

  Make ESC quit prompts

  #+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src

  Add =/usr/local/bin= to emacs environment to access executables like =rg=
  Add =/Library/TeX/texbin= to emacs environment to access LaTeX executables
  Add =/usr/local/go/bin= to emacs environment to access go executables like =go=

  #+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin:/Library/TeX/texbin:/usr/local/go/bin"))
  (setq exec-path (append exec-path '("/usr/local/bin" "/Library/TeX/texbin" "/usr/local/go/bin")))
  #+end_src

  Install undo tree

  #+begin_src emacs-lisp
  (use-package undo-tree
    :diminish
    :config
    (global-undo-tree-mode))
  #+end_src

  Install counsel, swiper and ivy. Setup global bindings.

  #+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)))

  (use-package swiper
    :diminish)

  (use-package ivy-avy)
  (use-package ivy-hydra)

  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("C-l" . ivy-alt-done)
                ("M-RET" . ivy-immediate-done)
                ("C-h" . ivy-beginning-of-buffer)
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                ("C-w" . evil-delete-backward-word)
                ("C-a" . ivy-dispatching-done)
                ("C-i" . ivy-avy)
                ("C-e" . ivy-occur)
                :map ivy-switch-buffer-map
                ("C-k" . ivy-previous-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-k" . ivy-previous-line)
                ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-initial-inputs-alist nil
          ivy-wrap t
          ivy-re-builders-alist
          '((t   . ivy--regex-ignore-order)))
    (ivy-mode 1))
  #+end_src

  Show some ivy/counsel buffers in popups

  #+begin_src emacs-lisp
  (use-package ivy-posframe
    :commands ivy-posframe-mode
    :diminish (ivy-posframe-mode . "ⒾⓅ")
    :config
    (setq ivy-posframe-display-functions-alist
          '((swiper          . ivy-posframe-display-at-frame-top-center)
            (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
            (t               . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-border-width 20))
  #+end_src

  Install =which-key= and other helpful information packages.

  #+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 1)
    (setq which-key-allow-evil-operators t)
    (setq which-key-add-column-padding 4))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
  #+end_src

  Install evil and evil packages.

  #+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-want-C-i-jump t)
    :custom
    (evil-search-module 'evil-search)
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)

    ;; Unbind conflicting keys
    (define-key evil-ex-completion-map (kbd "C-k") nil)
    (define-key evil-insert-state-map (kbd "C-k") nil)

    (define-key evil-insert-state-map (kbd "C-e") 'evil-append-line)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :config
    ;; disable company integration. It breaks stuff
    (setq evil-collection-mode-list (remove 'company evil-collection-mode-list))
    (evil-collection-init))

  (use-package evil-args
    :after evil
    :config
    (require 'evil-args)
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))

  (use-package evil-exchange
    :after evil
    :config
    (require 'evil-exchange)
    (evil-exchange-cx-install))

  (use-package evil-indent-plus
    :after evil
    :config
    (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
    (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
    (define-key evil-inner-text-objects-map "I" 'evil-indent-plus-i-indent-up)
    (define-key evil-outer-text-objects-map "I" 'evil-indent-plus-a-indent-up)
    (define-key evil-inner-text-objects-map "J" 'evil-indent-plus-i-indent-up-down)
    (define-key evil-outer-text-objects-map "J" 'evil-indent-plus-a-indent-up-down))

  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-nerd-commenter
    :after evil)

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-numbers
    :after evil
    :bind
    (:map evil-normal-state-map
          ("C-a" . evil-numbers/inc-at-pt)))

  (use-package evil-snipe
    :after evil
    :config
    (setq evil-snipe-scope 'visible)
    ;; improve f command
    (evil-snipe-override-mode 1))
  #+end_src

  Workaround evil bindings not there before hitting =ESC=
  https://github.com/emacs-evil/evil/issues/301

  #+begin_src emacs-lisp
  (add-hook 'org-src-mode-hook 'evil-normalize-keymaps)
  #+end_src

  Enable auto-completion with =company=

  #+begin_src emacs-lisp
  (use-package company
    :commands company-mode
    :diminish
    :bind
    (:map company-active-map
          ("C-j" . company-select-next)
          ("C-k" . company-select-previous))
    :custom
    ((company-minimum-prefix-length 1)
     (company-idle-delay 0.3))
    :hook
    ((text-mode . company-mode)
     (prog-mode . company-mode))
    :config
    ;; Disable tab so it doesn't conflict with other expansions
    (define-key company-active-map (kbd "<tab>") nil)
    (define-key company-active-map (kbd "C-w") nil))
  #+end_src

  Show documentation in a popup while completing

  #+begin_src emacs-lisp
  (use-package company-box
    :diminish
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-backends-colors nil
          company-box-max-candidates 1000
          company-tooltip-maximum-width 60
          company-box-icons-alist 'company-box-icons-idea))
  #+end_src

  Add =yasnippet= support for all company backends
  Source: https://github.com/syl20bnr/spacemacs/pull/179

  #+begin_src emacs-lisp
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (with-eval-after-load 'company
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
  #+end_src

  Add a way to visualize projects structure with =treemacs=

  #+begin_src emacs-lisp
  (use-package treemacs
    :commands treemacs
    :config
    (setq treemacs-indentation 2))

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-all-the-icons
    :after treemacs
    :config
    (treemacs-load-theme "all-the-icons"))
  #+end_src

  Add a way to jump through code more efficiently with =avy=.
  Configure it display overlay chars before match.

  #+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-background t
          avy-style 'at-full
          avy-timeout-seconds 0.3))
  #+end_src

  Delete trailing whitespaces on file save

  #+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
  #+end_src

  Unbind right meta key

  #+begin_src emacs-lisp
  (setq ns-right-alternate-modifier 'none)
  #+end_src

  Enable all local variables. *WARNING* this is risky

  #+begin_src emacs-lisp
  (setq enable-local-variables :all)
  #+end_src

  Start an empty scratch buffer

  #+begin_src emacs-lisp
  (setq initial-scratch-message "")
  #+end_src

  Disable ls on dired if system type is =darwin=

  #+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
  #+end_src

  Enable narrowing commands

  #+begin_src emacs-lisp
  (put 'narrow-to-defun  'disabled nil)
  (put 'narrow-to-page   'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  #+end_src

  Install expand region

  #+begin_src emacs-lisp
  (use-package expand-region
    :commands er/expand-region)
  #+end_src

  Uniquify buffer names

  #+begin_src emacs-lisp
  (setq uniquify-buffer-name-style 'forward)
  #+end_src

* UI
** General

   Hide file type icon in titlebar in macOS. Run the following bash command

   #+begin_src bash
   defaults write org.gnu.Emacs HideDocumentIcon YES
   #+end_src

   Disable startup message

   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   #+end_src

   Disable visual scrollbar, toolbar, tooltips and menubar

   #+begin_src emacs-lisp
   (scroll-bar-mode -1)
   (tool-bar-mode -1)
   (tooltip-mode -1)
   #+end_src

   Use spaces instead of tabs

   #+begin_src emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+end_src

   Show column number in mode line

   #+begin_src emacs-lisp
   (column-number-mode)
   #+end_src

   Show relative line numbers in =prog-mode=

   #+begin_src emacs-lisp
   (add-hook 'prog-mode-hook
             (lambda ()
               (display-line-numbers-mode t)
               (setq display-line-numbers 'relative)))
   #+end_src

   Remove bottom emacs window margins (happens on Mac OS)

   #+begin_src emacs-lisp
   (setq frame-resize-pixelwise t)
   #+end_src

   Highlight current line on prog and text modes
   Also do an animation when cursor changes position.

   #+begin_src emacs-lisp
   (use-package beacon
     :after doom-modeline
     :diminish
     :config
     (setq beacon-color
           (face-attribute 'doom-modeline-evil-normal-state :foreground nil t)
           beacon-blink-when-window-scrolls nil
           beacon-size 25
           beacon-blink-when-point-moves-horizontally nil
           beacon-blink-when-point-moves-vertically 3)
     (dolist (hook '(text-mode-hook
                     prog-mode-hook))
       (add-hook hook
                 (lambda ()
                   (hl-line-mode)
                   (beacon-mode 1)))))
   #+end_src

   Change titlebar title

   #+begin_src emacs-lisp
   (setq-default frame-title-format '("Emacs"))
   #+end_src

   Disable bell

   #+begin_src emacs-lisp
   (setq ring-bell-function 'ignore)
   #+end_src

   Render unicode characters correctly

   #+begin_src emacs-lisp
   (use-package unicode-fonts
     :config (unicode-fonts-setup))
   #+end_src

   Diminish minor modes in mode-line

   #+begin_src emacs-lisp
   (use-package diminish)
   #+end_src

   When you visit a file, point goes to the last place where it was
   when you previously visited the same file.

   #+begin_src emacs-lisp
   (use-package saveplace
     :ensure nil
     :config
     (save-place-mode 1))
   #+end_src

** Colors

   Define doom modeline iedit face

   #+begin_src emacs-lisp
   (setq rst/evil-iedit-color "IndianRed1")

   (defface rst/doom-modeline-evil-iedit-face
     `((t :foreground ,rst/evil-iedit-color
          :background nil))
     "Face for doom modeline iedit state")
   #+end_src

** Fun

   Add a beautiful parrot to the modeline

   #+begin_src emacs-lisp
   (use-package parrot
     :init
     (setq parrot-num-rotations nil))

   (declare-function parrot-create 'parrot)
   #+end_src

   Render fire

   #+begin_src emacs-lisp
   (use-package fireplace)
   #+end_src

** Theme

   Don't dim modeline when window is inactive

   #+begin_src emacs-lisp
   (defun rst/do-nothing (&rest args) t)
   (advice-add 'powerline-selected-window-active :around 'rst/do-nothing)
   #+end_src

   Configure and set a theme

   #+begin_src emacs-lisp
   (defun rst/inherit-icon (icon)
     "Make icon inherit faces. Use with all the icons."
     (add-face-text-property
      0 (length icon)
      :inherit t icon)
     icon)

   (use-package doom-themes)

   (use-package spacemacs-common
     :ensure spacemacs-theme)

   (use-package all-the-icons)

   (load-theme 'doom-one t)
   #+end_src

   Configure the mode line

   #+begin_src emacs-lisp
   (use-package doom-modeline
     :config
     (set-face-attribute 'doom-modeline-panel nil
                         :inherit 'doom-modeline-info
                         :background nil)
     (setq doom-modeline-minor-modes nil
           doom-modeline-checker-simple-format nil
           doom-modeline-buffer-file-name-style 'truncate-with-project)
     (remove-hook 'org-src-mode-hook #'doom-modeline-set-org-src-modeline)
     (remove-hook 'git-commit-mode-hook #'doom-modeline-set-message-modeline)
     (add-hook 'startup-mode-hook #'doom-modeline-set-dashboard-modeline))

   (defsubst rst/doom-modeline-evil ()
     "The current evil state. Requires `evil-mode' to be enabled."
     (when (bound-and-true-p evil-local-mode)
       (doom-modeline--modal-icon
        ""
        (cond
         ((evil-normal-state-p) 'doom-modeline-evil-normal-state)
         ((evil-emacs-state-p) 'doom-modeline-evil-emacs-state)
         ((evil-insert-state-p) 'doom-modeline-evil-insert-state)
         ((evil-motion-state-p) 'doom-modeline-evil-motion-state)
         ((evil-visual-state-p) 'doom-modeline-evil-visual-state)
         ((evil-operator-state-p) 'doom-modeline-evil-operator-state)
         ((evil-replace-state-p) 'doom-modeline-evil-replace-state)
         ((evil-iedit-state-p) 'rst/doom-modeline-evil-iedit-face)
         ((evil-iedit-insert-state-p) 'rst/doom-modeline-evil-iedit-face)
         (t 'doom-modeline-evil-normal-state))
        "Evil state")))

   (defsubst rst/doom-modeline--buffer-name ()
     "The current buffer name."
     (if (and (not (eq doom-modeline-buffer-file-name-style 'file-name))
              doom-modeline--limited-width-p)
         (propertize "%b"
                     'face (cond ((and buffer-file-name (buffer-modified-p))
                                  'doom-modeline-buffer-modified)
                                 ((doom-modeline--active) 'doom-modeline-buffer-file)
                                 (t 'mode-line-inactive))
                     'mouse-face 'mode-line-highlight
                     'help-echo "Buffer name
   mouse-1: Previous buffer\nmouse-3: Next buffer"
                     'local-map mode-line-buffer-identification-keymap)
       (when-let ((name (or doom-modeline--buffer-file-name
                            (doom-modeline-update-buffer-file-name))))
         (if (doom-modeline--active)
             name
           (propertize name 'face 'mode-line-inactive)))))

   (doom-modeline-def-segment rst/evil-state
     "Displays evil states."
     (let* ((evil (rst/doom-modeline-evil))
            (sep (doom-modeline-spc)))
       (concat sep (when evil evil) sep)))

   (doom-modeline-def-segment rst/buffer-info
     "Displays buffer info."
     (concat
      (doom-modeline-spc)
      (doom-modeline--buffer-mode-icon)
      (doom-modeline--buffer-state-icon)
      (rst/doom-modeline--buffer-name)))

   (doom-modeline-def-modeline 'rst
     '(bar workspace-name window-number rst/evil-state matches
           rst/buffer-info remote-host word-count parrot selection-info)
     '(misc-info vcs persp-name battery irc mu4e gnus github debug
                 repl lsp minor-modes indent-info
                 major-mode process checker))

   (defun rst/doom-modeline-setup ()
     (doom-modeline-set-modeline 'rst 'default))

   (add-hook 'doom-modeline-mode-hook 'rst/doom-modeline-setup)

   (doom-modeline-mode 1)
   #+end_src

   Make sure avy faces does not have background

   #+begin_src emacs-lisp
   (if (not (eq (face-attribute 'avy-lead-face :background nil t) 'unspecified))
       (progn
         (set-face-attribute
          'avy-lead-face nil
          :background nil
          :foreground (face-attribute 'avy-lead-face :background nil t))
         (set-face-attribute
          'avy-lead-face-0 nil
          :background nil
          :foreground (face-attribute 'avy-lead-face-0 :background nil t))
         (set-face-attribute
          'avy-lead-face-1 nil
          :background nil
          :foreground (face-attribute 'avy-lead-face-1 :background nil t))
         (set-face-attribute
          'avy-lead-face-2 nil
          :background nil
          :foreground (face-attribute 'avy-lead-face-2 :background nil t))

         (set-face-attribute
          'avy-goto-char-timer-face nil
          :background "gray20"
          :foreground "SlateGray1"
          :inherit nil)
         )
     )
   #+end_src

** Font

   Set default font

   #+begin_src emacs-lisp
   (set-face-attribute 'default nil :font "Jetbrains Mono" :height 130)
   (set-face-attribute 'mode-line nil :font "Syne Mono" :height 120)
   #+end_src

   Disable python =and= and =or= ligatures

   #+begin_src emacs-lisp
   (setq python-prettify-symbols-alist '(("lambda" . 955)))
   #+end_src

   Enable Fira Code ligatures

   #+begin_src emacs-lisp
   (use-package fira-code-mode
     :diminish
     :custom
     (fira-code-mode-disabled-ligatures
      '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
     :hook prog-mode)
   #+end_src

** Dashboard

   Install custom dashboard

   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/custom")

   (require 'startup)

   (startup-setup-hook)
   #+end_src

** Window

   Assign number to each window. Used to jump between windows.

   #+begin_src emacs-lisp
   (use-package winum
     :config
     (winum-mode)
     (winum--clear-mode-line))
   #+end_src

   Group winum bindings in which-key by creating a fake key to represent all ten
   keys and hiding other keys

   #+begin_src emacs-lisp
   (push '(("\\(.*\\) 1" . "winum-select-window-1") .
           ("\\1 1..9" . "window 1..9"))
         which-key-replacement-alist)

   (push '((nil . "winum-select-window-[2-9]") . t)
         which-key-replacement-alist)
   #+end_src

   Allow window operations to be undone

   #+begin_src emacs-lisp
   (winner-mode 1)
   #+end_src

** Workspaces

   Use eyebrowse to manage workspaces

   #+begin_src emacs-lisp
   (use-package eyebrowse
     :config
     (eyebrowse-mode t)
     (setq eyebrowse-new-workspace t)) ;; New workspace will display scratch buffer
   #+end_src

** Tabs

   Install and configure centaur tabs

   #+begin_src emacs-lisp
   (use-package centaur-tabs
     :demand
     :config
     (setq centaur-tabs-style "wave"
           centaur-tabs-cycle-scope 'tabs
           centaur-tabs-set-modified-marker t
           centaur-tabs-modified-marker "☻")
     (centaur-tabs-headline-match)
     (centaur-tabs-group-by-projectile-project)
     :bind
     (:map evil-normal-state-map
           ("gt" . centaur-tabs-forward)
           ("gT" . centaur-tabs-backward)))
   #+end_src

   Ignore some buffers and magit

   #+begin_src emacs-lisp
   (defun centaur-tabs-hide-tab (x)
     "Do no to show buffer X in tabs."
     (let ((name (format "%s" x)))
       (or
        ;; Current window is not dedicated window.
        (window-dedicated-p (selected-window))

        ;; Buffer name not match below blacklist.
        (string-prefix-p "*epc" name)
        (string-prefix-p "*helm" name)
        (string-prefix-p "*Helm" name)
        (string-prefix-p "*Compile-Log*" name)
        (string-prefix-p "*lsp" name)
        (string-prefix-p "*company" name)
        (string-prefix-p "*Flycheck" name)
        (string-prefix-p "*tramp" name)
        (string-prefix-p " *Mini" name)
        (string-prefix-p "*help" name)
        (string-prefix-p "*straight" name)
        (string-prefix-p " *temp" name)
        (string-prefix-p "*Help" name)
        (string-prefix-p "*mybuf" name)
        (string-prefix-p "magit" name)
        )))
   #+end_src

   When grouping projects, add eshell to the term group

   #+begin_src emacs-lisp
   (defun centaur-tabs-projectile-buffer-groups ()
     "Return the list of group names BUFFER belongs to."
     (if centaur-tabs-projectile-buffer-group-calc
         (symbol-value 'centaur-tabs-projectile-buffer-group-calc)
       (set (make-local-variable 'centaur-tabs-projectile-buffer-group-calc)

            (cond
             ((or
               (get-buffer-process (current-buffer))
               (memq major-mode '(comint-mode compilation-mode))
               (equal major-mode 'eshell-mode))
              '("Term"))
             ((string-equal "*" (substring (buffer-name) 0 1)) '("Misc"))
             ((condition-case _err
                  (projectile-project-root)
                (error nil)) (list (projectile-project-name)))
             ((memq major-mode '(emacs-lisp-mode python-mode emacs-lisp-mode c-mode
                                                 c++-mode javascript-mode js-mode
                                                 js2-mode makefile-mode
                                                 lua-mode vala-mode)) '("Coding"))
             ((memq major-mode '(nxhtml-mode html-mode
                                             mhtml-mode css-mode)) '("HTML"))
             ((memq major-mode '(org-mode calendar-mode diary-mode)) '("Org"))
             ((memq major-mode '(dired-mode)) '("Dir"))
             (t '("Other"))))
       (symbol-value 'centaur-tabs-projectile-buffer-group-calc)))
   #+end_src

** Diminish some built-in minor modes

   #+begin_src emacs-lisp
   (use-package autorevert
     :ensure nil
     :diminish (auto-revert-mode . "ⒶⓇ"))

   (use-package eldoc
     :ensure nil :diminish)

   (use-package page-break-lines
     :diminish)
   #+end_src

** Popups

   Add ability to close some windows with just =C-g=

   #+begin_src emacs-lisp
   (use-package popwin
     :config
     (popwin-mode 1)
     (push '(TeX-output-mode :noselect t :tail t) popwin:special-display-config)
     (push "*scratch*" popwin:special-display-config)
     (push '("*git-gutter+-diff*" :stick t) popwin:special-display-config))
   #+end_src

* Dired

  Enable a way to filter files in dired

  #+begin_src emacs-lisp
  (use-package dired-narrow)
  #+end_src

  When there is two dired windows, copy and move commands will default to the
  other window directory.

  #+begin_src emacs-lisp
  (setq dired-dwim-target t)
  #+end_src

  Change =ls= options

  #+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
  #+end_src

* Org Mode

  Basic configuration

  #+begin_src emacs-lisp
  (defvar rst/org-files-path "~/Dropbox/org/"
    "Folder path where all org files are stored")

  (use-package org
    :diminish
    :config
    (setq org-agenda-start-with-log-mode t
          org-log-done 'time
          org-log-into-drawer t
          org-ellipsis " ↩"
          org-agenda-files `(,rst/org-files-path)))
  #+end_src

  Configure a project org file

  #+begin_src emacs-lisp
  (defun rst/org-projectile-file ()
    "Return current project org file. If not in a project
  currently, prompt for it."
    (let* ((current-project (projectile-project-root))
           (project-path (projectile-ensure-project current-project)))

      (concat
       (file-name-as-directory rst/org-files-path)
       (projectile-project-name project-path) ".org")
      )
    )

  (defun rst/open-org-projectile-file ()
    (interactive)
    (let ((org-file (rst/org-projectile-file)))
      (if org-file
          (find-file org-file))))
  #+end_src

  Configure todo keywords. Add a few states

  #+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d!)")
          (sequence "BLOCKED(b)" "|" "DELEGATED(D)" "CANCELLED(c)")))
  #+end_src

  Improve org heading bullets

  #+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :config
    (setq org-bullets-bullet-list
          '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯"
            "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
    :hook (org-mode . org-bullets-mode))
  #+end_src

  Change org headings size

  #+begin_src emacs-lisp
  (with-eval-after-load "org"
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font "Roboto Mono"
                          :weight 'regular
                          :height (cdr face))))
  #+end_src

  Configure org title size and style

  #+begin_src emacs-lisp
  (with-eval-after-load "org"
    (set-face-attribute 'org-document-title nil
                        :underline t
                        :height 1.4))
  #+end_src

  Configure templates expansion

  #+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("mmd" . "src mermaid"))
  #+end_src

  Add padding to document

  #+begin_src emacs-lisp
  (defun rst/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . rst/org-mode-visual-fill))
  #+end_src

  Don't indent org source blocks

  #+begin_src emacs-lisp
  (setq org-edit-src-content-indentation 0)
  #+end_src

  Install =ob-mermaid= to render mermaid diagrams with org-babel.
  *NOTE*: Has to be loaded after mermaid-mode to override =org-babel-execute:mermaid=.

  #+begin_src emacs-lisp
  (use-package ob-mermaid
    :after mermaid-mode)
  #+end_src

  Display inline images automatically after executing some source block

  #+begin_src emacs-lisp
  (defvar rst/org-src-language-to-image
    '("mermaid")
    "A list of languages that generate images. Images will be displayed
  when a source block of this language is executed.")

  (defun rst/org-display-images-after-execute ()
    "Redisplay inline images after executing source blocks of some languages."
    (let ((language (car (org-babel-get-src-block-info t))))
      (when (member language rst/org-src-language-to-image)
        (org-display-inline-images))))

  (add-hook 'org-babel-after-execute-hook #'rst/org-display-images-after-execute)
  #+end_src

  Don't ask for confirmation when executing a source block

  #+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  #+end_src

  Add export backends

  #+begin_src emacs-lisp
  (setq org-export-backends '("ascii" "html" "icalendar" "latex" "odt" "md"))
  #+end_src

  Install better evil bindings in orgmode

  #+begin_src emacs-lisp
  (use-package evil-org
    :diminish
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  #+end_src

  Use pomodoro technique for time management

  #+begin_src emacs-lisp
  (use-package org-pomodoro
    :after org)
  #+end_src

  Show info in mode line

  #+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'which-func-mode)
  #+end_src

* Development

** Editing

   Install =evil-iedit-state=, a variant of multi-cursors for evil.

   #+begin_src emacs-lisp
   (use-package evil-iedit-state)
   #+end_src

   Install wgrep to edit files in a grep buffer.
   Used to do project-wide edits with ivy-occur.

   #+begin_src emacs-lisp
   (use-package wgrep)
   #+end_src

** Projectile

   Install projectile and search for projects in =~/Code=.
   We use ivy as completion system and install counsel for better integration.

   #+begin_src emacs-lisp
   (use-package projectile
     :diminish
     :config (projectile-mode)
     :custom ((projectile-completion-system 'ivy))
     :init
     (when (file-directory-p "~/Code")
       (setq projectile-project-search-path '("~/Code"))))

   ;; Install better ivy and projectile integration
   (use-package counsel-projectile
     :config (counsel-projectile-mode))

   (counsel-projectile-modify-action
    'counsel-projectile-switch-project-action
    '((default counsel-projectile-switch-project-action-dired)))

   (counsel-projectile-modify-action
    'counsel-projectile-find-file-action
    '((default counsel-projectile-find-file-action-other-window)))
   #+end_src

   Enable ivy rich after counsel projectile, they depend on this

   #+begin_src emacs-lisp
   (use-package ivy-rich
     :init (ivy-rich-mode t))
   #+end_src

   Install treemacs and projectile integration

   #+begin_src emacs-lisp
   (use-package treemacs-projectile
     :after treemacs projectile)
   #+end_src

** Visual help

   Sets background color to strings that match color names

   #+begin_src emacs-lisp
   (use-package rainbow-mode
     :diminish
     :hook
     (prog-mode . rainbow-mode))
   #+end_src

   Highlight pairs with different colors

   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :defer t
     :hook
     (prog-mode . rainbow-delimiters-mode)
     (text-mode . rainbow-delimiters-mode))
   #+end_src

   Highlight enclosing parenthesis

   #+begin_src emacs-lisp
   (use-package highlight-parentheses
     :diminish
     :config
     (set-face-attribute 'highlight-parentheses-highlight nil
                         :weight 'ultra-bold))

   (setq highlight-parentheses-colors
         '("Springgreen3" "IndianRed1" "IndianRed3" "IndianRed4"))

   (add-hook 'prog-mode-hook 'highlight-parentheses-mode)
   #+end_src

   Automatically insert closing pairs and integrate it will evil.
   Also, highlight matching pair.

   #+begin_src emacs-lisp
   (use-package smartparens
     :diminish
     :defer t
     :config
     (require 'smartparens-config)
     (set-face-attribute 'sp-show-pair-match-face nil
                         :foreground "#86dc2f"
                         :weight 'ultra-bold
                         :underline t)
     ;; Configure new line behaviour
     (sp-local-pair 'go-mode "{" nil :post-handlers '(("||\n[i]" "RET")))
     :hook
     (text-mode . show-smartparens-mode)
     (prog-mode . show-smartparens-mode)
     (text-mode . smartparens-mode)
     (prog-mode . smartparens-mode))

   (use-package evil-smartparens
     :defer t
     :config
     (add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode))
   #+end_src

   Highlight indent levels

   #+begin_src emacs-lisp
   (use-package highlight-indent-guides
     :diminish
     :config
     (setq highlight-indent-guides-method 'bitmap
           highlight-indent-guides-responsive 'top
           highlight-indent-guides-auto-top-character-face-perc 20)
     :hook
     (prog-mode . highlight-indent-guides-mode))
   #+end_src

   Change cursor color depending on evil mode and doom-modeline state color

   #+begin_src emacs-lisp
   (setq evil-normal-state-cursor
         `(,(face-attribute 'doom-modeline-evil-normal-state :foreground nil t) box)

         evil-motion-state-cursor
         `(,(face-attribute 'doom-modeline-evil-motion-state :foreground nil t) box)

         evil-visual-state-cursor
         `(,(face-attribute 'doom-modeline-evil-visual-state :foreground nil t) (hbar . 2))

         evil-insert-state-cursor
         `(,(face-attribute 'doom-modeline-evil-insert-state :foreground nil t) (bar . 2))

         evil-replace-state-cursor
         `(,(face-attribute 'doom-modeline-evil-replace-state :foreground nil t) (hbar . 2))

         evil-emacs-state-cursor
         `(,(face-attribute 'doom-modeline-evil-emacs-state :foreground nil t) box)

         evil-iedit-state-cursor
         `(,rst/evil-iedit-color box)

         evil-iedit-insert-state-cursor
         `(,rst/evil-iedit-color (bar . 2)))
   #+end_src

   Highlight todo and similar keywords

   #+begin_src emacs-lisp
   (use-package hl-todo
     :hook (prog-mode . hl-todo-mode))
   #+end_src

** Version Control

   Update vc info automatically

   #+begin_src emacs-lisp
   (setq auto-revert-check-vc-info t)
   #+end_src

   Install magit and integrate it with vim

   #+begin_src emacs-lisp
   (use-package magit
     :commands (magit-status magit-blame-addition))

   (use-package evil-magit
     :commands (magit-status magit-blame-addition))

   (use-package forge
     :commands (magit-status))
   #+end_src

   Enter Magit commit buffer in start mode

   #+begin_src emacs-lisp
   (add-hook 'git-commit-mode-hook 'evil-insert-state)
   #+end_src

   Visualize git hunks in the fringe. Also, update them on magit refresh.

   #+begin_src emacs-lisp
   (use-package git-gutter+
     :diminish
     :config
     (global-git-gutter+-mode))

   (use-package git-gutter-fringe+
     :after git-gutter+
     :config
     (setq right-fringe-width 20
           git-gutter-fr+-side 'right-fringe)
     (set-face-foreground 'git-gutter-fr+-modified "SlateGrey"))

   (defun rst/git-gutter+-refresh-in-all-buffers ()
     (git-gutter+-in-all-buffers (when git-gutter+-mode (git-gutter+-refresh))))

   (add-hook 'magit-pre-refresh-hook 'rst/git-gutter+-refresh-in-all-buffers)
   #+end_src

   Integrate treemacs with magit

   #+begin_src emacs-lisp
   (use-package treemacs-magit
     :after treemacs magit)
   #+end_src

   Generate links to the remote file

   #+begin_src emacs-lisp
   (use-package git-link
     :commands git-link)
   #+end_src

** Terminal

   Install =vterm= and =shell-pop=. Configure it to use =zsh= and show
   at the bottom.

   #+begin_src emacs-lisp
   (use-package vterm
     :commands vterm
     :config
     (setq vterm-max-scrollback 10000))

   (use-package shell-pop
     :commands shell-pop
     :custom
     ((shell-pop-window-size 30)
      (shell-pop-window-position "bottom")
      (shell-pop-cleanup-buffer-at-process-exit t)
      (shell-pop-autocd-to-working-dir nil)
      (shell-pop-term-shell "/usr/local/bin/zsh")
      (shell-pop-shell-type (quote ("vterm" "vterm-pop" (lambda nil (vterm)))))))
   #+end_src

   Hide modeline in shell pop ups.

   #+begin_src emacs-lisp
   (add-hook 'shell-pop-in-after-hook
             (lambda () (setq mode-line-format nil)))
   #+end_src

   Configure eshell

   #+begin_src emacs-lisp
   (defun rst/configure-eshell ()
     ;; Save command history when commands are entered
     (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

     ;; Truncate buffer for performance
     (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

     (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)

     (setq eshell-history-size 10000
           eshell-buffer-maximum-lines 10000
           eshell-hist-ignoredups t
           eshell-scroll-to-bottom-on-input t))
   #+end_src

   Install eshell git prompt to show git info in eshell

   #+begin_src emacs-lisp
   (use-package eshell-git-prompt)

   (use-package eshell
     :ensure nil
     :hook (eshell-first-time-mode . rst/configure-eshell)
     :config
     (with-eval-after-load 'esh-opt
       (setq eshell-destroy-buffer-when-process-dies t)
       (setq eshell-visual-commands '("htop" "zsh" "vim")))
     (eshell-git-prompt-use-theme 'robbyrussell))
   #+end_src

** Snippets

   #+begin_src emacs-lisp
   (use-package yasnippet
     :diminish (yas-minor-mode . "")
     :config
     (yas-global-mode 1))

   (use-package yasnippet-snippets
     :after yasnippet)
   #+end_src

** Languages

*** Checkers

    Configure flycheck and its fringe bitmap

    #+begin_src emacs-lisp
    (use-package flycheck
      :diminish
      :custom
      (flycheck-python-flake8-executable "flake8")
      (flycheck-python-pylint-executable "pylint")
      :config

      (flycheck-define-error-level 'error
        :severity 2
        :compilation-level 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap 'exclamation-mark
        :fringe-face 'flycheck-fringe-error
        :error-list-face 'flycheck-error-list-error)

      (flycheck-define-error-level 'warning
        :severity 1
        :compilation-level 2
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap 'exclamation-mark
        :fringe-face 'flycheck-fringe-warning
        :error-list-face 'flycheck-error-list-warning)

      (flycheck-define-error-level 'info
        :severity 0
        :compilation-level 2
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap 'exclamation-mark
        :fringe-face 'flycheck-fringe-info
        :error-list-face 'flycheck-error-list-info))
    #+end_src

    Show flycheck information in a popups

    #+begin_src emacs-lisp
    (use-package flycheck-popup-tip
      :after flycheck
      :custom
      (flycheck-popup-tip-error-prefix ""))
    #+end_src

*** Language Servers

    Install =lsp-mode=, configure a prefix and integrate with =which-key=.

    #+begin_src emacs-lisp
    (defun rst/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode 1))

    (use-package lsp-mode
      :diminish (lsp-mode . "LSP")
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . rst/lsp-mode-setup)
      :config
      (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :bind
      (:map lsp-ui-peek-mode-map
            ("k" . lsp-ui-peek--select-prev)
            ("j" . lsp-ui-peek--select-next)
            ("l" . lsp-ui-peek--select-next-file)
            ("h" . lsp-ui-peek--select-prev-file))
      :hook
      (lsp-mode . lsp-ui-mode))

    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy
      :after lsp)
    #+end_src

*** Python

    Install sphinx docs support

    #+begin_src emacs-lisp
    (use-package sphinx-doc
      :diminish
      :commands sphinx-doc-mode
      :config
      :hook (python-mode . (lambda ()
                             (sphinx-doc-mode t))))
    #+end_src

    Enable =lsp-deferred= mode for python

    #+begin_src emacs-lisp
    (use-package lsp-python-ms
      :commands (lsp lsp-deferred)
      :init (setq lsp-python-ms-auto-install-server t)
      :hook (python-mode . (lambda ()
                             (require 'lsp-python-ms)
                             (lsp))))  ; or lsp-deferred
    #+end_src

    Enable =flycheck= for python

    #+begin_src emacs-lisp
    (add-hook 'python-mode-hook 'flycheck-mode)
    #+end_src

*** Go

    Install =go-mode=

    #+begin_src emacs-lisp
    (use-package go-mode
      :commands go-mode)
    #+end_src

    Set tab width to 4

    #+begin_src emacs-lisp
    (add-hook 'go-mode-hook
              (lambda ()
                (setq indent-tabs-mode nil
                      go-tab-width 4
                      tab-width 4)))
    #+end_src

    Enable =lsp-deferred= mode for Go

    #+begin_src emacs-lisp
    (add-hook 'go-mode-hook
              (lambda () (lsp)))
    #+end_src

    Setup completion

    #+begin_src emacs-lisp
    (use-package company-go
      :commands go-mode
      :config
      (add-hook 'go-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends) '(company-go)))))
    #+end_src

*** Javascript

    Set indent width to 2

    #+begin_src emacs-lisp
    (setq js-indent-level 2)
    #+end_src

*** Docker

    #+begin_src emacs-lisp
    (use-package dockerfile-mode
      :commands dockerfile-mode
      :config
      (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
    #+end_src

*** YAML

    #+begin_src emacs-lisp
    (use-package yaml-mode
      :commands yaml-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
    #+end_src

*** Kubernetes

    Manage kubernetes resources from emacs

    #+begin_src emacs-lisp
    (use-package kubernetes
      :commands (kubernetes-overview))

    (use-package kubernetes-evil
      :after kubernetes)
    #+end_src

* Writing

** General

   Highlight characters over 80

   #+begin_src emacs-lisp
   (use-package whitespace
     :diminish
     :commands whitespace-mode)

   (setq whitespace-line-column 80
         whitespace-style '(face lines-tail trailing))

   (add-hook 'prog-mode-hook 'whitespace-mode)
   (add-hook 'text-mode-hook 'whitespace-mode)
   #+end_src

   Flyspell correct word with ivy

   #+begin_src emacs-lisp
   (use-package flyspell
     :commands flyspell-mode
     :ensure nil
     :diminish (flyspell-mode . "ⓕ"))

   (use-package flyspell-correct
     :after flyspell)

   (use-package flyspell-correct-ivy
     :after flyspell-correct)
   #+end_src

** LaTeX

   Install AucTeX and simplify =TeX-font= bindings

   #+begin_src emacs-lisp
   (use-package tex-mode
     :ensure auctex
     :custom
     (LaTeX-font-list
      '((?a ""              ""  "\\mathcal{"    "}")
        (?b "\\textbf{"     "}" "\\mathbf{"     "}")
        (?c "\\textsc{"     "}")
        (?e "\\emph{"       "}")
        (?f "\\textsf{"     "}" "\\mathsf{"     "}")
        (?i "\\textit{"     "}" "\\mathit{"     "}")
        (?l "\\textulc{"    "}")
        (?m "\\textmd{"     "}")
        (?n "\\textnormal{" "}" "\\mathnormal{" "}")
        (?r "\\textrm{"     "}" "\\mathrm{"     "}")
        (?s "\\textsl{"     "}" "\\mathbb{"     "}")
        (?t "\\texttt{"     "}" "\\mathtt{"     "}")
        (?u "\\textup{"     "}")
        (?w "\\textsw{"     "}")
        (?d "" "" t))))
   #+end_src

   Automatically wrap long lines while writing

   #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook
             (lambda () (auto-fill-mode)))
   (diminish 'auto-fill-function "ⓐⓕ")
   #+end_src

   Enable spell checking and show compilation buffer

   #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook
             (lambda () (flyspell-mode 1)))

   (setq TeX-show-compilation t)
   #+end_src

   Define variable to store main TeX files. This file is used for compilation

   #+begin_src emacs-lisp
   (defvar rst/TeX-main-filename "main.tex"
     "TeX main file to use for compilation.")

   (defun rst/TeX-main-file (&optional extension &rest r)
     "Retrieve TeX main filename to use with AUCTeX. This ignores
   all parameters."
     (interactive)
     rst/TeX-main-filename)
   #+end_src

   Add =@online= entry to bibtex

   #+begin_src emacs-lisp
   (use-package bibtex
     :commands bibtex-mode
     :ensure nil
     :config
     (setq bibtex-dialect 'biblatex))
   #+end_src

** Google

   Search something

   #+begin_src emacs-lisp
   (use-package google-this
     :diminish (google-this-mode . "ⓖ")
     :commands (google-this-noconfirm
                google-this-search)
     :config
     (google-this-mode 1))
   #+end_src

   Install google translate and its dependency popup.
   Configure languages too.

   #+begin_src emacs-lisp
   (use-package popup)
   (use-package google-translate
     :commands (google-translate-smooth-translate)
     :config
     (setq google-translate-translation-directions-alist
           '(("en" . "es") ("es". "en"))))

   (use-package google-translate-default-ui
     :after google-translate
     :ensure nil
     :config
     ;; Workaround to bug https://github.com/atykhonov/google-translate/issues/137
     (defun google-translate--search-tkk ()
       "Search TKK."
       (list 430675 2721866130)))
   #+end_src

** Diagrams

   Install mermaid mode

   #+begin_src emacs-lisp
   (use-package mermaid-mode
     :commands mermaid-mode)
   #+end_src

* Networking

  Add capabilities to add ssh-key to agent.

  #+begin_src emacs-lisp
  (defvar rst/ssh-default-key "~/.ssh/id_rsa"
    "My default SSH key.")

  (defun rst/ssh-add (&optional arg)
    "Add the default ssh-key if it's not present.
  With a universal argument, prompt to specify which key."
    (interactive "P")
    (when (or arg
              (not (rst/ssh-agent-has-keys-p)))
      (rst/ssh-add-in-emacs
       (if (not arg)
           rst/ssh-default-key
         (read-file-name
          "Add key: \n" "~/.ssh" nil 't nil
          (lambda (x)
            (not (or (string-suffix-p ".pub" x)
                     (string= "known_hosts" x)))))))))

  (defun rst/ssh-agent-has-keys-p ()
    "Return t if the ssh-agent has a key."
    (when
        (= 0 (call-process "ssh-add" nil nil nil "-l"))
      t))

  (defun rst/ssh-add-in-emacs (key-file)
    "Run ssh-add to add a key to the running SSH agent."
    (let ((process-connection-type t)
          process)
      (unwind-protect
          (progn
            (setq process
                  (start-process
                   "ssh-add" nil "ssh-add"
                   (expand-file-name key-file)))
            (set-process-filter
             process 'rst/ssh-add-process-filter)
            (while (accept-process-output process)))
        (if (eq (process-status process) 'run)
            (kill-process process)))))

  (defun rst/ssh-add-process-filter (process string)
    "Process filter to enter passphrase when needed."
    (save-match-data
      (if (string-match ":\\s *\\'" string)
          (process-send-string process
                               (concat
                                (read-passwd string)
                                "\n"))
        (message "ssh-add: %s" string))))
  #+end_src

* Custom functions

** Hydra

   Install hydra

   #+begin_src emacs-lisp
   (use-package hydra)
   #+end_src

   Define hydra function to scale text

   #+begin_src emacs-lisp
   (defhydra rst/hydra-text-scale (:timeout 4)
     "Scale text"
     ("k" text-scale-increase "bigger")
     ("j" text-scale-decrease "smaller")
     ("q" nil "quit" :exit t))
   #+end_src

   Define hydra function to merge conflicts

   #+begin_src emacs-lisp
   (defhydra rst/hydra-merge-conflicts ()
     "Merge conflicts"
     ("n" smerge-next "next conflict")
     ("p" smerge-prev "previous conflict")
     ("u" smerge-keep-upper "keep upper")
     ("l" smerge-keep-lower "keep lower")
     ("a" smerge-keep-all "keep all")
     ("q" nil "quit" :exit t))
   #+end_src

   Define hydra function to cycle between git hunks

   #+begin_src emacs-lisp
   (defhydra rst/hydra-cycle-hunks ()
     "Cycle, revert and stage hunks"
     ("j" git-gutter+-next-hunk "next hunk")
     ("k" git-gutter+-previous-hunk "previous hunk")
     ("s" git-gutter+-show-hunk "show hunk")
     ("r" git-gutter+-revert-hunk "revert hunk")
     ("q" nil "quit" :exit t))
   #+end_src

   Define hydra function to cycle through a bunch of stuff

   #+begin_src emacs-lisp
   (defhydra rst/hydra-cycle (:hint nil)
     "
   ^Hunk^             ^Avy^            ^Flycheck^
   --------------------------------------------------
   _h_: next          _j_: next        _e_: next
   _H_: previous      _J_: previous    _E_: previous

   _q_: quit
   "
     ("h" git-gutter+-next-hunk)
     ("H" git-gutter+-previous-hunk)

     ("j" avy-next)
     ("J" avy-prev)

     ("e" flycheck-next-error)
     ("E" flycheck-previous-error)

     ("q" nil :exit t))
   #+end_src

** Counsel Projectile

   Define custom counsel projectile search function to provide default input.
   This is used for =SPC /= and =SPC *= bindings.

   #+begin_src emacs-lisp
   (defun rst/counsel-projectile-rg-thing-at-point ()
     "Custom counsel projectile rg to pass thing at point as input."
     (interactive)
     (let* ((thing (ivy-thing-at-point))
            (counsel-projectile-rg-initial-input thing))
       (when (use-region-p)
         (deactivate-mark))
       (counsel-projectile-rg)))
   #+end_src

   Define way to add current project to treemacs

   #+begin_src emacs-lisp
   (defun rst/projectile-add-to-treemacs ()
     "Add current project to treemacs workspace."
     (interactive)
     (treemacs-add-project-to-workspace (projectile-project-root)))
   #+end_src

** Helpers


   Open this config file

   #+begin_src emacs-lisp
   (defun rst/open-config-file ()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
   #+end_src

   Define way to quickly switch to last buffer

   #+begin_src emacs-lisp
   (defun rst/switch-to-previous-buffer ()
     "Switch to previously open buffer.
   Repeated invocations toggle between the two most recently open buffers."
     (interactive)
     (switch-to-buffer (other-buffer (current-buffer) 1)))
   #+end_src

   Define a way to split line smartly and enter a new line

   #+begin_src emacs-lisp
   (defun rst/split-and-new-line ()
     "Split a quoted string or s-expresion and insert a new line with
   auto-indent"
     (interactive)
     (sp-split-sexp 1)
     (sp-newline))
   #+end_src

   Insert a date with format =2020-11-04=

   #+begin_src emacs-lisp
   (defun rst/insert-date ()
     "Insert a date with `date` command in current line"
     (interactive)
     (evil-read (- (evil-ex-current-line) 1) "!date \"+%F\""))
   #+end_src

   Insert org header with current date

   #+begin_src emacs-lisp
   (defun rst/insert-org-header-with-date (heading-level)
     (interactive "p")
     (rst/insert-date)
     (org-toggle-heading heading-level))
   #+end_src

   Do some cleanup when hitting ESC key

   #+begin_src emacs-lisp
   (defun rst/escape ()
     (interactive)
     (evil-ex-nohighlight)
     (popwin:close-popup-window)
     (keyboard-quit))

   (advice-add 'evil-force-normal-state :after #'rst/escape)
   #+end_src

   Insert elisp source block and edit it

   #+begin_src emacs-lisp
   (defun rst/insert-and-edit-elisp-src-block ()
     "Insert an elisp source block and edit it in
   org src mode."
     (interactive)
     (org-cycle)
     (org-insert-structure-template "src emacs-lisp")
     (org-edit-src-code))
   #+end_src

   Create workspace and give it a name

   #+begin_src emacs-lisp
   (defun rst/eyebrowse-create-config-window-config ()
     (interactive)
     "Create config workspace."
     (eyebrowse-create-window-config)
     (eyebrowse-rename-window-config
      (eyebrowse--get 'current-slot) "config")
     (rst/open-config-file))
   #+end_src

   Execute current sexp

   #+begin_src emacs-lisp
   (defun rst/eval-current-sexp ()
     (interactive)
     (save-excursion
       (sp-end-of-sexp)
       (eval-last-sexp nil)))
   #+end_src

** Parrot

   Create some functions to change parrot temporarily

   #+begin_src emacs-lisp
   (defun rst/parrot-thumbs-up ()
     (interactive)
     (parrot-set-parrot-type 'thumbsup)
     (run-at-time "10 sec" nil 'parrot-set-parrot-type 'default))

   (defun rst/parrot-science ()
     (interactive)
     (parrot-set-parrot-type 'science)
     (run-at-time "10 sec" nil 'parrot-set-parrot-type 'default))

   (defun rst/parrot-nyan ()
     (interactive)
     (parrot-set-parrot-type 'nyan)
     (run-at-time "10 sec" nil 'parrot-set-parrot-type 'default))
   #+end_src

   Add some hooks to change parrot

   #+begin_src emacs-lisp
   (add-hook 'git-commit-mode-hook 'rst/parrot-thumbs-up)
   #+end_src

* Keybindings

  #+begin_src emacs-lisp
  (use-package general
    :config

    (general-create-definer bind-leader-key
      :states '(normal insert motion visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer bind-mode-key
      :states '(normal insert motion visual emacs)
      :keymaps 'override
      :prefix ","
      :global-prefix "M-m")

    (general-create-definer bind-insert-mode
      :states '(insert))

    (general-create-definer bind-g-normal-mode
      :states '(normal)
      :prefix "g")

    (general-create-definer bind-op-square-brackets
      :states '(normal)
      :prefix "[")

    (general-create-definer bind-cl-square-brackets
      :keymaps 'override
      :states '(normal)
      :prefix "]")

    (bind-op-square-brackets
      "j" '(avy-prev :which-key "avy previous")
      "h" '(git-gutter+-previous-hunk :which-key "git previous hunk")
      "e" '(flycheck-previous-error :which-key "flycheck previous error"))

    (bind-cl-square-brackets
      "]" '(rst/hydra-cycle/body :which-key "cycle next")

      "j" '(avy-next :which-key "avy next")
      "h" '(git-gutter+-next-hunk :which-key "git next hunk")
      "e" '(flycheck-next-error :which-key "flycheck next error"))

    (bind-leader-key
      :infix "q"
      "q" '(save-buffers-kill-terminal :which-key "quit"))

    (bind-leader-key
      "0" '(treemacs-select-window :which-key "window 0 - treemacs")
      "1" 'winum-select-window-1
      "2" 'winum-select-window-2
      "3" 'winum-select-window-3
      "4" 'winum-select-window-4
      "5" 'winum-select-window-5
      "6" 'winum-select-window-6
      "7" 'winum-select-window-7
      "8" 'winum-select-window-8
      "9" 'winum-select-window-9)

    (bind-insert-mode
      "C-c s" '(flyspell-auto-correct-word :which-key "auto-correct word"))

    (bind-g-normal-mode
      "c" '(evilnc-comment-operator :which-key "evilnc-comment-operator"))

    ;; Global binds or shortcuts
    (bind-leader-key
      "SPC" '(avy-goto-char-timer :which-key "avy go to char timer")

      "/" '(counsel-projectile-rg :which-key "search project")
      "*" '(rst/counsel-projectile-rg-thing-at-point :which-key "search project thing at point")

      "'" '(shell-pop :which-key "shell pop")

      "<tab>" '(rst/switch-to-previous-buffer :which-key "switch to last buffer")

      "." '(projectile-find-file :which-key "find project file")
      "," '(counsel-switch-buffer :which-key "switch buffer")

      ":" '(eval-expression :which-key "eval expression")
      ";" '(ivy-resume :which-key "ivy resume")

      "v" '(er/expand-region :which-key "expand region")
      "u" '(universal-argument :which-key "universal argument"))

    (bind-leader-key
      :infix "f"
      "" '(:ignore t :which-key "files")
      "s" '(save-buffer :which-key "save file")
      "SPC" '(save-buffer :which-key "save file")
      "f" '(counsel-find-file :which-key "find file")
      "r" '(counsel-recentf :which-key "find recent file")

      "e" '(rst/open-config-file :which-key "open config file")
      "o" '((lambda () (interactive)
              (counsel-find-file rst/org-files-path))
            :which-key "find org file"))

    (bind-leader-key
      :infix "b"
      "" '(:ignore t :which-key "buffers")
      "b" '(counsel-switch-buffer :which-key "switch buffer")
      "k" '(kill-buffer :which-key "kill a buffer")
      "K" '(kill-current-buffer :which-key "kill current buffer")
      "S" '((lambda () (interactive)
              (switch-to-buffer "*scratch*")) :which-key "switch to scratch")
      "s" '((lambda () (interactive)
              (popwin:display-buffer "*scratch*")) :which-key "switch to popup scratch")
      "i" '(ibuffer :which-key "ibuffer")
      "R" '(revert-buffer :which-key "revert buffer")
      "m" '(popwin:messages :which-key "popup messages")
      "n" '(evil-buffer-new :which-key "new buffer"))

    (bind-leader-key
      :infix "t"
      "" '(:ignore t :which-key "toggles/text")

      ;; Text
      "t" '(google-translate-smooth-translate :which-key "google translate")
      "s" '(rst/hydra-text-scale/body :which-key "scale text")

      "T" '(counsel-load-theme :which-key "choose theme")

      ;; Toggles
      "f" '(auto-fill-mode :which-key "toggle auto fill")
      "v" '(visual-fill-column-mode :which-key "toggle visual fill column")
      "R" '(ivy-rich-mode :which-key "toggle ivy rich")
      "p" '(ivy-posframe-mode :which-key "toggle ivy posframe")
      "r" '(read-only-mode :which-key "toggle read only")

      "F" '(flycheck-popup-tip-mode :which-key "toggle flycheck popups")

      "c" '(centaur-tabs-mode :which-key "toggle centaur tabs")

      "i" '(org-toggle-inline-images :which-key "toggle org inline images")

      "m" '(counsel-minor :which-key "toggle minor mode")
      "M" '(counsel-major :which-key "toggle major mode")

      "P" '(parrot-mode :which-key "toggle parrot")

      "b" '(lsp-headerline-breadcrumb-mode :which-key "toggle lsp breadcrumbs")
      "d" '(lsp-ui-doc-mode :which-key "toggle lsp doc"))

    (bind-leader-key
      :infix "p"
      "" '(:ignore t :which-key "projects")
      "s" '(counsel-projectile-rg :which-key "search project")
      "v" '(projectile-edit-dir-locals :which-key "edit project dir locals")
      "d" '(projectile-dired :which-key "project dired")
      "p" '(projectile-switch-project :which-key "switch project")
      "f" '(projectile-find-file :which-key "find project file")
      "b" '(counsel-projectile-switch-to-buffer :which-key "switch to project buffer")
      "T" '(rst/projectile-add-to-treemacs :which-key "add current project to treemacs")
      "n" '(rst/open-org-projectile-file :which-key "open project org file"))

    (bind-leader-key
      :infix "g"
      "" '(:ignore t :which-key "git")
      "g" '(magit-status :which-key "git status")
      "c" '(rst/hydra-merge-conflicts/body :which-key "merge conflicts")
      "h" '(rst/hydra-cycle-hunks/body :which-key "cycle hunks")
      "b" '(magit-blame-addition :which-key "blame")

      "s" '(git-gutter+-show-hunk-inline-at-point :which-key "show current hunk diff")
      "S" '(git-gutter+-show-hunk :which-key "show current hunk diff in a buffer")
      "r" '(git-gutter+-revert-hunk :which-key "revert current hunk")
      "n" '(git-gutter+-next-hunk :which-key "next hunk")
      "p" '(git-gutter+-previous-hunk :which-key "previous hunk")

      "l" '(git-link :which-key "git link"))

    (bind-leader-key
      :infix "s"
      "" '(:ignore t :which-key "search/spelling")
      "s" '(swiper :which-key "swiper")
      "S" '(swiper-thing-at-point :which-key "swiper thing at point")
      "SPC" '(swiper-thing-at-point :which-key "swiper thing at point")
      "c" '(evil-ex-nohighlight :which-key "clear highlight")

      "d" '(ispell-change-dictionary :which-key "change dictionary")
      "w" '(flyspell-auto-correct-word :which-key "auto-correct word")
      "W" '(flyspell-correct-at-point :which-key "correct word")

      "g" '(google-this-noconfirm :which-key "google this")
      "G" '(google-this-search :which-key "google search"))

    (bind-leader-key
      :infix "h"
      "" '(:ignore t :which-key "help")
      "v" '(describe-variable :which-key "describe variable")
      "f" '(describe-function :which-key "describe function")
      "F" '(counsel-describe-face :which-key "describe face")
      "m" '(describe-mode :which-key "describe mode")
      "k" '(describe-key :which-key "describe key")
      "K" '(counsel-descbinds :which-key "describe bindings"))

    (bind-leader-key
      :infix "l"
      "" '(:ignore t :which-key "lisp")
      "e" '(eval-last-sexp :which-key "eval last sexp")
      "l" '(rst/eval-current-sexp :which-key "eval current sexp")
      "p" '(check-parens :which-key "check parens"))

    (bind-leader-key
      :infix "w"
      "" '(:ignore t :which-key "windows/workspaces")
      "j" '(evil-window-down :which-key "move to window below")
      "k" '(evil-window-up :which-key "move to window above")
      "h" '(evil-window-left :which-key "move to window on the left")
      "l" '(evil-window-right :which-key "move to window on the right")

      "J" '(windmove-swap-states-down :which-key "move to window below")
      "K" '(windmove-swap-states-up :which-key "move to window above")
      "H" '(windmove-swap-states-left :which-key "move to window on the left")
      "L" '(windmove-swap-states-right :which-key "move to window on the right")

      "d" '(evil-window-delete :which-key "delete window")
      "s" '(evil-window-split :which-key "horizontal split")
      "v" '(evil-window-vsplit :which-key "vertical split")
      "m" '(delete-other-windows :which-key "maximize window")

      "w" '(eyebrowse-last-window-config :which-key "last workspace")
      "W" '(eyebrowse-switch-to-window-config :which-key "switch workspace")
      "n" '(eyebrowse-next-window-config :which-key "next workspace")
      "p" '(eyebrowse-prev-window-config :which-key "previous workspace")
      "r" '(eyebrowse-rename-window-config :which-key "rename workspace")
      "C" '(eyebrowse-close-window-config :which-key "close workspace")
      "c" '(eyebrowse-create-window-config :which-key "create workspace")
      "e" '(rst/eyebrowse-create-config-window-config
            :which-key "create config workspace")

      "u" '(winner-undo :which-key "winner undo")
      "U" '(winner-redo :which-key "winner redo")

      "M" '(popwin:messages :which-key "popup messages buffer"))

    (bind-mode-key
      :keymaps 'org-mode-map
      "," '(org-babel-tangle :which-key "org babel tangle")

      "c" '(:ignore t :which-key "clock")
      "ci" '(org-clock-in :which-key "org clock in")
      "co" '(org-clock-out :which-key "org clock out")

      "i" '(:ignore t :which-key "insert")
      "id" '(rst/insert-org-header-with-date :which-key "org header with date")
      "ih" '(org-insert-heading :which-key "org header")

      "e" '(org-edit-src-code :which-key "org edit source")
      "l" '(rst/insert-and-edit-elisp-src-block :which-key "org new elisp src block")

      "s" '(org-schedule :which-key "org schedule")
      "d" '(org-deadline :which-key "org deadline")
      "r" '(org-babel-execute-src-block :which-key "org execute code")
      "I" '(org-display-inline-images :which-key "org display inline images")
      "x" '(org-export-dispatch :which-key "org export")

      "t" '(:ignore t :which-key "toggle/todo")
      "tc" '(org-toggle-checkbox :which-key "org toggle checkbox")
      "tt" '(org-todo :which-key "org todo")
      "th" '(org-toggle-heading :which-key "org toggle heading")
      "tl" '(org-toggle-link-display :which-key "org toggle link display")
      "td" '((lambda () (interactive)
               (org-todo 'done))
             :which-key "org mark tas as DONE"))

    (bind-mode-key
      :keymaps 'LaTeX-mode-map
      "e" '(LaTeX-environment :which-key "environment")
      "s" '(LaTeX-section :which-key "section")
      "i" '(LaTeX-insert-item :which-key "insert item")

      "C" '(TeX-command-master :which-key "compile")
      "c" '((lambda () (interactive) (TeX-command "LaTeX" 'TeX-main-file))
            :which-key "compile LaTeX")
      "b" '((lambda () (interactive) (TeX-command "BibTeX" 'TeX-main-file))
            :which-key "compile BibTeX")

      "f" '(TeX-font :which-key "font")
      "M" '(LaTeX-math-mode :which-key "math mode")
      "m" '(:ignore t :which-key "math")
      "mf" '(LaTeX-math-frac :which-key "fraction"))

    (bind-mode-key
      :keymaps 'bibtex-mode-map
      "e" '(bibtex-entry :which-key "bibtex entry")
      "t" '(bibtex-remove-OPT-or-ALT :which-key "bibtex remove OPT or ALT"))

    (bind-mode-key
      :keymaps 'org-src-mode-map
      "," '(org-edit-src-exit :which-key "org source exit")
      "s" '(org-edit-src-save :which-key "org source save")
      "e" '(org-edit-src-exit :which-key "org source exit")
      "a" '(org-edit-src-abort :which-key "org source abort")
      "k" '(org-edit-src-abort :which-key "org source abort")
      "q" '(org-edit-src-abort :which-key "org source abort"))

    (bind-mode-key
      :keymaps 'dired-mode-map
      "f" '(dired-narrow :which-key "dired narrow"))

    (bind-mode-key
      :keymaps 'git-commit-mode-map
      "," '(with-editor-finish :which-key "finish")
      "k" '(with-editor-cancel :which-key "cancel"))

    (bind-mode-key
      :keymaps 'python-mode-map
      "d" '(sphinx-doc :which-key "generate sphinx doc")
      "a" '(lsp-execute-code-action "execute code action"))

    (bind-mode-key
      :keymaps 'go-mode-map
      "n" '(go-import-add :which-key "add new import")
      "i" '(go-goto-imports :which-key "go to imports")
      "a" '(go-goto-arguments :which-key "go to function arguments")
      "u" '(go-remove-unused-imports :which-key "remove unused imports")

      "p" '(:ignore t :which-key "peek")
      "pr" '(lsp-ui-peek-find-references :which-key "peek references")
      "pd" '(lsp-ui-peek-find-definitions :which-key "peek definitions")

      "d" '(lsp-find-definition :which-key "go to definition"))

    (bind-leader-key
      :infix "a"
      "" '(:ignore t :which-key "applications")
      "d" '(dired :which-key "dired")
      "t" '(treemacs :which-key "treemacs")
      "v" '(vterm :which-key "vterm")
      "e" '(eshell :which-key "eshell")
      "s" '(shell :which-key "shell")
      "i" '(ielm :which-key "ielm")
      "a" '(org-agenda :which-key "org agenda"))

    (bind-leader-key
      :infix "e"
      "" '(:ignore t :which-key "edit/errors")
      "e" '(evil-iedit-state/iedit-mode :which-key "iedit mode")

      "n" '(flycheck-next-error :which-key "flycheck next error")
      "p" '(flycheck-previous-error :which-key "flycheck previous error")
      "f" '(counsel-flycheck :which-key "flycheck errors"))

    (bind-leader-key
      :infix "j"
      "" '(:ignore t :which-key "jump/split")
      "j" '(avy-goto-char-2 :which-key "jump to char 2")
      "w" '(avy-goto-word-1 :which-key "jump to word")
      "r" '(avy-resume :which-key "resume jump")
      "h" '(avy-org-goto-heading-timer :which-key "jump to org heading")
      "n" '(avy-next :which-key "jump to next candidate")
      "p" '(avy-prev :which-key "jump to previous candidate")

      "i" '(counsel-imenu :which-key "imenu")

      "c" '(avy-copy-region :which-key "jump, copy and paste")
      "m" '(avy-move-region :which-key "jump, cut and paste")

      "C" '(avy-copy-line :which-key "jump, copy and paste line")
      "M" '(avy-move-line :which-key "jump, cut and paste line")

      "b" '(counsel-bookmark :which-key "create/jump to bookmarks")

      ;; split
      "S" '(sp-split-sexp :which-key "split sexp")
      "s" '(rst/split-and-new-line :which-key "split sexp and new line"))

    (bind-leader-key
      :infix "n"
      "" '(:ignore t :which-key "narrowing")
      "w" '(widen :which-key "widen")
      "r" '(narrow-to-region :which-key "narrow to region")
      "f" '(narrow-to-defun :which-key "narrow to defun"))

    (bind-leader-key
      :infix "i"
      "" '(:ignore t :which-key "insert")
      "c" '(counsel-yank-pop :which-key "from clipboard")
      "d" '(rst/insert-date :which-key "date")
      "u" '(counsel-unicode-char :which-key "unicode char")
      "s" '(yas-insert-snippet :which-key "snippet"))

    (bind-leader-key
      :infix "P"
      "" '(:ignore t :which-key "popups")
      "l" '(popwin:popup-last-buffer :which-key "last popup")
      "s" '(popwin:stick-popup-window :which-key "stick popup"))
    )
  #+end_src

* Configuration Debugging

  Install bug-hunter

  #+begin_src emacs-lisp
  (use-package bug-hunter)
  #+end_src

* Startup Time Analysis

  |-------+-------------------------------------------------------------------|
  | Time  | Action                                                            |
  |-------+-------------------------------------------------------------------|
  | 2.5s  | -                                                                 |
  | 2.24s | Use :commands to lazy load some packages                          |
  | 2.12s | Garbage collection optimizations                                  |
  | 2.4s  | Inhibiting window resizing on startup. I feel it faster though... |
  |-------+-------------------------------------------------------------------|

* Pending Configuration
** DONE [#C] Check use package and general integration
   CLOSED: [2020-11-24 Tue 23:31]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-11-24 Tue 23:31]
   :END:
** TODO [#C] org wild notifier to show OS notifications
** DONE [#C] Check datetree
   CLOSED: [2020-11-24 Tue 23:30]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-11-24 Tue 23:30]
   :END:
** TODO [#C] org capture templates (tables, datetrees, ...)
** DONE [#B] org habits
   CLOSED: [2020-11-24 Tue 23:28]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-11-24 Tue 23:28]
   :END:
** DONE [#C] Why do I need to hit Escape in Org source mode to access "," bindings?
   CLOSED: [2020-11-04 Wed 23:10]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-11-04 Wed 23:10]
   :END:
** DONE Fix whitespace highlight on mini buffer
   CLOSED: [2020-10-24 Sat 13:42]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-10-24 Sat 13:42]
   :END:
** DONE Why when I press C-j and there is only one match in company box, new line is inserted
   CLOSED: [2020-10-24 Sat 23:51]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-10-24 Sat 23:51]
   :END:

   This was caused by evil collection. I disabled it and binded the keys in company mode
   manually.
** DONE [#B] Clean up go environment paths. HOME?
   CLOSED: [2020-12-04 Fri 16:14]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-12-04 Fri 16:14]
   :END:
   Changed =GOPATH= to =/usr/local/go=.
