#+title: Emacs Configuration

#+property: header-args:emacs-lisp :tangle ./init.el
#+startup: content

* Pre-init

  Make startup faster by reducing the frequency of garbage collection
  Default is 800 kilobytes.

  #+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  #+end_src

* Package System Setup

  Initialize package

  #+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  #+end_src

  Install =use-package= and configure it to always ensure packages

  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src

* General

  Move backup and auto-save files to tmp

  #+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
  #+end_src

  Make ESC quit prompts

  #+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  #+end_src

  Add =/usr/local/bin= to emacs environment to access executables like =rg=
  Add =/Library/TeX/texbin= to emacs environment to access LaTeX executables
  Add =~/go/bin= to emacs environment to access go executables like =gopls=
  Add =/usr/local/go/bin= to emacs environment to access go executables like =go=

  #+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin:/Library/TeX/texbin:~/go/bin:/usr/local/go/bin"))
  (setq exec-path (append exec-path '("/usr/local/bin" "/Library/TeX/texbin" "~/go/bin" "/usr/local/go/bin")))
  #+end_src

  Install counsel, swiper and ivy. Setup global bindings.

  #+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   ("C-r" . 'counsel-minibuffer-history)))

  (use-package swiper
    :diminish)

  (use-package ivy
    :diminish
    :config
    (setq ivy-initial-inputs-alist
	  '((counsel-minor . "")
	    (counsel-package . "")
	    (counsel-org-capture . "")
	    (counsel-M-x . "")
	    (counsel-describe-symbol . "")
	    (org-refile . "")
	    (org-agenda-refile . "")
	    (org-capture-refile . "")
	    (Man-completion-table . "")
	    (woman . "")))
    :bind (:map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   ("C-w" . evil-delete-backward-word)
	   ("C-a" . ivy-dispatching-done)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
	   :config
	   (ivy-mode 1))
  #+end_src

  Show some ivy/counsel buffers in popups

  #+begin_src emacs-lisp
  (use-package ivy-posframe
    :config
    (setq ivy-posframe-display-functions-alist
	  '((swiper          . ivy-posframe-display-at-frame-top-center)
	    (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
	    (t               . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-width 120
	  ivy-posframe-height 30
	  ivy-posframe-border-width 20))
  #+end_src

  Install =which-key= and other helpful information packages.

  #+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 0.3)
    (setq which-key-allow-evil-operators t)
    (setq which-key-add-column-padding 4))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
  #+end_src

  Install evil and evil packages.

  #+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :custom
    (evil-search-module 'evil-search)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :config
    ;; disable company integration. It breaks stuff
    (setq evil-collection-mode-list (remove 'company evil-collection-mode-list))
    (evil-collection-init))

  (use-package evil-args
    :after evil
    :config
    (require 'evil-args)
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))

  (use-package evil-exchange
    :after evil
    :config
    (require 'evil-exchange)
    (evil-exchange-cx-install))

  (use-package evil-indent-plus
    :after evil
    :config
    (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
    (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
    (define-key evil-inner-text-objects-map "I" 'evil-indent-plus-i-indent-up)
    (define-key evil-outer-text-objects-map "I" 'evil-indent-plus-a-indent-up)
    (define-key evil-inner-text-objects-map "J" 'evil-indent-plus-i-indent-up-down)
    (define-key evil-outer-text-objects-map "J" 'evil-indent-plus-a-indent-up-down))

  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-nerd-commenter
    :after evil)

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-iedit-state)

  (use-package evil-numbers
    :config
    :bind
    (:map evil-normal-state-map
	  ("C-a" . evil-numbers/inc-at-pt)))
  #+end_src

  Enable auto-completion with =company=

  #+begin_src emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
	  ("C-j" . company-select-next)
	  ("C-k" . company-select-previous))
    :custom
    ((company-minimum-prefix-length 1)
     (company-idle-delay 0.0))
    :hook
    ((text-mode . company-mode)
     (prog-mode . company-mode))
    :config
    ;; Disable tab so it doesn't conflict with other expansions
    (define-key company-active-map (kbd "<tab>") nil)
    (define-key company-active-map (kbd "C-w") nil))

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :bind
    (:map company-active-map
	  ("C-h" . company-box-doc-manually))
    :custom
    ((company-box-doc-enable nil)))
  #+end_src

  Add =yasnippet= support for all company backends
  Source: https://github.com/syl20bnr/spacemacs/pull/179

  #+begin_src emacs-lisp
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
	backend
      (append (if (consp backend) backend (list backend))
	      '(:with company-yasnippet))))

  (with-eval-after-load 'company
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
  #+end_src

  Add a way to visualize projects structure with =treemacs=

  #+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :config
    (setq treemacs-indentation 4))

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-icons-dired
    :after (treemacs dired))
  #+end_src

  Show icons in dired buffers

  #+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)
  #+end_src

  Add a way to jump through code more efficiently with =avy=

  #+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-background t))
  #+end_src

  Delete trailing whitespaces on file save

  #+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+end_src

  Unbind right meta key

  #+begin_src emacs-lisp
  (setq ns-right-alternate-modifier 'none)
  #+end_src

  Enable all local variables. *WARNING* this is risky

  #+begin_src emacs-lisp
  (setq enable-local-variables :all)
  #+end_src

  Start an empty scratch buffer

  #+begin_src emacs-lisp
  (setq initial-scratch-message "")
  #+end_src

  Disable ls on dired if system type is =darwin=

  #+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
  #+end_src

* UI
** General

   Disable startup message

   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   #+end_src

   Disable visual scrollbar, toolbar, tooltips and menubar

   #+begin_src emacs-lisp
   (scroll-bar-mode -1)
   (tool-bar-mode -1)
   (tooltip-mode -1)
   (menu-bar-mode -1)
   #+end_src

   Widen fringe a little bit

   #+begin_src emacs-lisp
   (set-fringe-mode 5)
   #+end_src

   Use spaces instead of tabs

   #+begin_src emacs-lisp
   (setq indent-tabs-mode nil)
   #+end_src

   Show column number in mode line

   #+begin_src emacs-lisp
   (column-number-mode)
   #+end_src

   Show relative line numbers in =prog-mode=

   #+begin_src emacs-lisp
   (add-hook 'prog-mode-hook
	     (lambda ()
	       (display-line-numbers-mode t)
	       (setq display-line-numbers 'relative)))
   #+end_src

   Remove bottom emacs window margins (happens on Mac OS)

   #+begin_src emacs-lisp
   (setq frame-resize-pixelwise t)
   #+end_src

   Highlight trailing whitespaces everywhere but some modes

   #+begin_src emacs-lisp
   (dolist (hook '(text-mode-hook
		   prog-mode-hook))
     (add-hook hook
	       (lambda () (setq show-trailing-whitespace t))))
   #+end_src

   Remove title bar icon. Looks ugly

   #+begin_src emacs-lisp
   (setq ns-use-proxy-icon nil)
   #+end_src

   Highlight current line

   #+begin_src emacs-lisp
   (global-hl-line-mode 1)
   #+end_src

** Theme

   Install =doom-modeline= and set a theme

   #+begin_src emacs-lisp
   (use-package doom-modeline
     :init
     (setq doom-modeline-height 10)
     (doom-modeline-mode 1)
     :config
     (setq doom-modeline-github t))

   (use-package doom-themes
     :init
     (load-theme 'doom-monokai-classic t))

   (use-package all-the-icons)
   #+end_src

** Font

   Set default font

   #+begin_src emacs-lisp
   (set-face-attribute 'default nil :font "Fira Code Retina" :height 130)
   #+end_src

   Disable python =and= and =or= ligatures

   #+begin_src emacs-lisp
   (setq python-prettify-symbols-alist '(("lambda" . 955)))
   #+end_src

   Enable Fira Code ligatures

   #+begin_src emacs-lisp
   (use-package fira-code-mode
     :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
     :hook prog-mode)
   #+end_src

** Dashboard

   Install dashboard and configure its look

   #+begin_src emacs-lisp
   (use-package dashboard
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-center-content t)
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-banner-logo-title "Welcome rstcruzo!")
     (setq dashboard-items '((agenda . 3)
			     (recents . 3)
			     (projects . 3)
			     (bookmarks . 3)))
     (setq dashboard-set-init-info t)
     (setq dashboard-startup-banner "~/Pictures/Icons/emacs.png"))
   #+end_src

** Window

   #+begin_src emacs-lisp
   (use-package winum
     :config
     (winum-mode)
     (winum--clear-mode-line))
   #+end_src

   Group winum bindings in which-key by creating a fake key to represent all ten
   keys and hiding other keys

   #+begin_src emacs-lisp
   (push '(("\\(.*\\) 1" . "winum-select-window-1") .
	   ("\\1 1..9" . "window 1..9"))
	 which-key-replacement-alist)

   (push '((nil . "winum-select-window-[2-9]") . t)
	 which-key-replacement-alist)
   #+end_src

** Workspaces

   Use eyebrowse to manage workspaces

   #+begin_src emacs-lisp
   (use-package eyebrowse
     :config
     (eyebrowse-mode t)
     (setq eyebrowse-new-workspace t))
   #+end_src

* Org Mode

  Basic configuration

  #+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-ellipsis " ↩")
    (setq org-agenda-files
	  '("~/.emacs.d/config.org"
	    "~/Code/thesis/TODOs.org"))
  #+end_src

  Configure todo keywords. Add a few states

  #+begin_src emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)" "|" "DONE(d!)")
	  (sequence "BLOCKED(b)" "|" "DELEGATED(D)" "CANCELED(c)"))))
  #+end_src

  Improve org heading bullets

  #+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :config
    (setq org-bullets-bullet-list
	  '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
    :hook (org-mode . org-bullets-mode))
  #+end_src

  Change org headings size

  #+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.3)
		  (org-level-2 . 1.2)
		  (org-level-3 . 1.1)
		  (org-level-4 . 1.05)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil
			:font "Fira Code Retina"
			:weight 'regular
			:height (cdr face)))
  #+end_src

  Configure templates expansion

  #+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("mmd" . "src mermaid"))
  #+end_src

  Add padding to document

  #+begin_src emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))

  (setq org-edit-src-content-indentation 0)
  #+end_src

  Install =ob-mermaid= to render mermaid diagrams with org-babel.
  *NOTE*: Has to be loaded after mermaid-mode to override =org-babel-execute:mermaid=.

  #+begin_src emacs-lisp
  (use-package ob-mermaid
    :after mermaid-mode)
  #+end_src

  Display inline images automatically after executing source block

  #+begin_src emacs-lisp
  (defun org-display-images-after-execute ()
    "Redisplay inline images after executing source blocks with mermaid results."
    (let ((language (car (org-babel-get-src-block-info t))))
      (when (string= language "mermaid")
	(org-display-inline-images))))

  (add-hook 'org-babel-after-execute-hook #'org-display-images-after-execute)
  #+end_src

  Don't ask for confirmation when executing a source block

  #+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  #+end_src

  Add export backends

  #+begin_src emacs-lisp
  (setq org-export-backends '("ascii" "html" "icalendar" "latex" "odt" "md"))
  #+end_src

* Development

** Projectile

   Install projectile and search for projects in =~/Code=.
   We use ivy as completion system and install counsel for better integration.

   #+begin_src emacs-lisp
   (use-package projectile
     :diminish
     :config (projectile-mode)
     :custom ((projectile-completion-system 'ivy))
     :init
     (when (file-directory-p "~/Code")
       (setq projectile-project-search-path '("~/Code"))))

   ;; Install better ivy and projectile integration
   (use-package counsel-projectile
     :config (counsel-projectile-mode))

   (counsel-projectile-modify-action
    'counsel-projectile-switch-project-action
    '((default counsel-projectile-switch-project-action-dired)))

   (counsel-projectile-modify-action
    'counsel-projectile-find-file-action
    '((default counsel-projectile-find-file-action-other-window)))
   #+end_src

   Enable ivy rich after counsel projectile, they depend on this

   #+begin_src emacs-lisp
   (use-package all-the-icons-ivy-rich
     :init (all-the-icons-ivy-rich-mode 1))

   (use-package ivy-rich
     :init (ivy-rich-mode t))
   #+end_src

   Install treemacs and projectile integration

   #+begin_src emacs-lisp
   (use-package treemacs-projectile
     :after treemacs projectile)
   #+end_src

** Visual help

   Highlight pairs with different colors

   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :defer t
     :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

   Automatically insert closing pairs and integrate it will evil

   #+begin_src emacs-lisp
   (use-package smartparens
     :defer t
     :config (require 'smartparens-config)
     :hook
     (text-mode . smartparens-mode)
     (prog-mode . smartparens-mode))

   (use-package evil-smartparens
     :defer t
     :config
     (add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode))
   #+end_src

** Version Control

   Install magit and integrate it with vim

   #+begin_src emacs-lisp
   (use-package magit)
   (use-package evil-magit)

   (use-package forge)
   #+end_src

   Enter Magit commit buffer in start mode

   #+begin_src emacs-lisp
   (add-hook 'git-commit-mode-hook 'evil-insert-state)
   #+end_src

   Visualize git hunks in the fringe. Make sure they are updated when
   we operate on magit.

   #+begin_src emacs-lisp
   (use-package diff-hl
     :config
     (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
     (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
     (global-diff-hl-mode)
     (diff-hl-flydiff-mode))
   #+end_src

   Integrate treemacs with magit

   #+begin_src emacs-lisp
   (use-package treemacs-magit
     :after treemacs magit)
   #+end_src

** Terminal

   Install =vterm= and =shell-pop=. Configure it to use =zsh= and show
   at the bottom.

   #+begin_src emacs-lisp
   (use-package vterm)
   (use-package shell-pop
     :custom
     ((shell-pop-window-size 20)
      (shell-pop-window-position "bottom")
      (shell-pop-cleanup-buffer-at-process-exit t)
      (shell-pop-autocd-to-working-dir t)
      (shell-pop-term-shell "/usr/local/bin/zsh")
      (shell-pop-shell-type (quote ("vterm" "*pop-vterm*" (lambda nil (vterm)))))))
   #+end_src

** Snippets

   #+begin_src emacs-lisp
   (use-package yasnippet
     :config
     (yas-global-mode 1))

   (use-package yasnippet-snippets)
   #+end_src

** Languages

*** Checkers

    #+begin_src emacs-lisp
    (use-package flycheck)
    #+end_src

*** Language Servers

    Install =lsp-mode=, configure a prefix and integrate with =which-key=.

    #+begin_src emacs-lisp
    (defun lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :hook
      (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))

    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy)
    #+end_src

*** Python

    Enable =lsp-deferred= mode for python

    #+begin_src emacs-lisp
    (add-hook 'python-mode
	      (lambda () (lsp-deferred)))
    #+end_src

*** Go

    Install =go-mode=

    #+begin_src emacs-lisp
    (use-package go-mode)
    #+end_src

    Enable =lsp-deferred= mode for Go

    #+begin_src emacs-lisp
    (add-hook 'go-mode-hook
	      (lambda () (lsp-deferred)))
    #+end_src

    Set tab width to 4

    #+begin_src emacs-lisp
    (add-hook 'go-mode-hook
	      (lambda ()
		(setq indent-tabs-mode nil)
		(setq go-tab-width 4)
		(setq tab-width 4)))
    #+end_src

* Writing

** General

   Highlight characters over 80

   #+begin_src emacs-lisp
   (require 'whitespace)
   (setq whitespace-line-column 80)
   (setq whitespace-style '(face lines-tail))

   (add-hook 'prog-mode-hook 'whitespace-mode)
   (add-hook 'text-mode-hook 'whitespace-mode)
   #+end_src

** LaTeX

   Install AucTeX and simplify =TeX-font= bindings

   #+begin_src emacs-lisp
   (use-package tex-mode
     :ensure auctex
     :custom
     (LaTeX-font-list
      '((?a ""              ""  "\\mathcal{"    "}")
	(?b "\\textbf{"     "}" "\\mathbf{"     "}")
	(?c "\\textsc{"     "}")
	(?e "\\emph{"       "}")
	(?f "\\textsf{"     "}" "\\mathsf{"     "}")
	(?i "\\textit{"     "}" "\\mathit{"     "}")
	(?l "\\textulc{"    "}")
	(?m "\\textmd{"     "}")
	(?n "\\textnormal{" "}" "\\mathnormal{" "}")
	(?r "\\textrm{"     "}" "\\mathrm{"     "}")
	(?s "\\textsl{"     "}" "\\mathbb{"     "}")
	(?t "\\texttt{"     "}" "\\mathtt{"     "}")
	(?u "\\textup{"     "}")
	(?w "\\textsw{"     "}")
	(?d "" "" t))))
   #+end_src

   Automatically wrap long lines while writing

   #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook
	     (lambda () (auto-fill-mode)))
   #+end_src

   Enable spell checking

   #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook
	     (lambda () (flyspell-mode t)))

   (setq TeX-show-compilation t)
   #+end_src

   Define variable to store main TeX files. This file is used for compilation

   #+begin_src emacs-lisp
   (defvar TeX-main-filename "main"
     "TeX main file to use for compilation.")

   (defun TeX-main-file (&optional extension &rest r)
     "Retrieve TeX main filename to use with AUCTeX."
     (interactive)
     (if (eq extension t)
	 (setq extension TeX-default-extension))
     (if (null extension)
	 TeX-main-filename
       (format "%s.%s" TeX-main-filename extension)))
   #+end_src

** Translate

   Install google translate and its dependency popup.
   Configure languages too.

   #+begin_src emacs-lisp
   (use-package popup)
   (use-package google-translate
     :config
     (setq google-translate-translation-directions-alist
	   '(("en" . "es") ("es". "en"))))
   (use-package google-translate-default-ui
     :ensure nil)
   #+end_src

** Diagrams

   Install mermaid mode

   #+begin_src emacs-lisp
   (use-package mermaid-mode)
   #+end_src

* Networking

  Add capabilities to add ssh-key to agent.

  #+begin_src emacs-lisp
  (defvar rst/ssh-default-key "~/.ssh/id_rsa"
    "My default SSH key.")

  (defun rst/ssh-add (&optional arg)
    "Add the default ssh-key if it's not present.
  With a universal argument, prompt to specify which key."
    (interactive "P")
    (when (or arg
	      (not (rst/ssh-agent-has-keys-p)))
      (rst/ssh-add-in-emacs
       (if (not arg)
	   rst/ssh-default-key
	 (read-file-name
	  "Add key: \n" "~/.ssh" nil 't nil
	  (lambda (x)
	    (not (or (string-suffix-p ".pub" x)
		     (string= "known_hosts" x)))))))))

  (defun rst/ssh-agent-has-keys-p ()
    "Return t if the ssh-agent has a key."
    (when
	(= 0 (call-process "ssh-add" nil nil nil "-l"))
      t))

  (defun rst/ssh-add-in-emacs (key-file)
    "Run ssh-add to add a key to the running SSH agent."
    (let ((process-connection-type t)
	  process)
      (unwind-protect
	  (progn
	    (setq process
		  (start-process
		   "ssh-add" nil "ssh-add"
		   (expand-file-name key-file)))
	    (set-process-filter
	     process 'rst/ssh-add-process-filter)
	    (while (accept-process-output process)))
	(if (eq (process-status process) 'run)
	    (kill-process process)))))

  (defun rst/ssh-add-process-filter (process string)
    "Process filter to enter passphrase when needed."
    (save-match-data
      (if (string-match ":\\s *\\'" string)
	  (process-send-string process
			       (concat
				(read-passwd string)
				"\n"))
	(message "ssh-add: %s" string))))
  #+end_src

* Custom functions

  Install hydra

  #+begin_src emacs-lisp
  (use-package hydra)
  #+end_src

  Define hydra function to scale text

  #+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "Scale text"
    ("k" text-scale-increase "bigger")
    ("j" text-scale-decrease "smaller")
    ("q" nil "quit" :exit t))
  #+end_src

  Define hydra function to merge conflicts

  #+begin_src emacs-lisp
  (defhydra hydra-merge-conflicts ()
    "Merge conflicts"
    ("n" smerge-next "next conflict")
    ("p" smerge-prev "previous conflict")
    ("u" smerge-keep-upper "keep upper")
    ("l" smerge-keep-lower "keep lower")
    ("a" smerge-keep-all "keep all")
    ("q" nil "quit" :exit t))
  #+end_src

  Define custom counsel projectile search functions to better handle default
  inputs. This is used for =SPC /= and =SPC *= bindings.

  #+begin_src emacs-lisp
  (defun counsel-projectile-rg-with-input (&optional input)
    "Custom counsel projectile rg to receive input as argument."
    (interactive)
    (counsel-rg input
		(projectile-project-root)
		nil
		(projectile-prepend-project-name
		 (concat (car (if (listp counsel-rg-base-command)
				  counsel-rg-base-command
				(split-string counsel-rg-base-command)))
			 ": "))))

  (defun counsel-projectile-rg-thing-at-point ()
    "Custom counsel projectile rg to pass thing at point as input."
    (interactive)
    (let ((thing (ivy-thing-at-point)))
      (when (use-region-p)
	(deactivate-mark))
      (counsel-projectile-rg-with-input thing)))
  #+end_src

  Define way to quickly switch to last buffer

  #+begin_src emacs-lisp
  (defun switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  #+end_src

  Define way to add current project to treemacs

  #+begin_src emacs-lisp
  (defun projectile-add-to-treemacs ()
    "Add current project to treemacs workspace."
    (interactive)
    (treemacs-add-project-to-workspace (projectile-project-root)))
  #+end_src

* Keybindings

  #+begin_src emacs-lisp
  (use-package general
    :config

    (general-create-definer bind-leader-key
      :states '(normal insert motion visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer bind-mode-key
      :states '(normal insert motion visual emacs)
      :keymaps 'override
      :prefix ","
      :global-prefix "M-m")

    (general-create-definer bind-insert-mode
      :states '(insert))

    (general-create-definer bind-g-normal-mode
      :states '(normal)
      :prefix "g")

    (bind-leader-key
      :infix "q"
      "q" '(save-buffers-kill-terminal :which-key "quit"))

    (bind-leader-key
      "0" '(treemacs-select-window :which-key "window 0 - treemacs")
      "1" 'winum-select-window-1
      "2" 'winum-select-window-2
      "3" 'winum-select-window-3
      "4" 'winum-select-window-4
      "5" 'winum-select-window-5
      "6" 'winum-select-window-6
      "7" 'winum-select-window-7
      "8" 'winum-select-window-8
      "9" 'winum-select-window-9)

    (bind-insert-mode
      "C-c s" '(flyspell-auto-correct-word :which-key "auto-correct word"))

    (bind-g-normal-mode
      "c" '(evilnc-comment-operator :which-key "evilnc-comment-operator"))

    ;; Global binds or shortcuts
    (bind-leader-key
      "SPC" '(counsel-M-x :which-key "M-x")
      "/" '(counsel-projectile-rg-with-input :which-key "search project")
      "*" '(counsel-projectile-rg-thing-at-point :which-key "search project thing at point")
      "'" '(shell-pop :which-key "shell pop")
      "<tab>" '(switch-to-previous-buffer :which-key "switch to last buffer"))

    (bind-leader-key
      :infix "f"
      "" '(:ignore t :which-key "files")
      "s" '(save-buffer :which-key "save file")
      "f" '(counsel-find-file :which-key "find file")
      "e" '((lambda () (interactive)
	      (find-file "~/.emacs.d/config.org"))
	    :which-key "find config file"))

    (bind-leader-key
      :infix "b"
      "" '(:ignore t :which-key "buffers")
      "b" '(counsel-ibuffer :which-key "switch buffer")
      "k" '(kill-buffer :which-key "kill a buffer")
      "K" '(kill-current-buffer :which-key "kill current buffer")
      "s" '((lambda () (interactive)
	      (switch-to-buffer "*scratch*")) :which-key "switch to scratch")
      "i" '(ibuffer :which-key "ibuffer")
      "R" '(revert-buffer :which-key "revert buffer"))

    (bind-leader-key
      :infix "t"
      "" '(:ignore t :which-key "toggles/text")
      "t" '(google-translate-smooth-translate :which-key "google translate")

      "T" '(counsel-load-theme :which-key "choose theme")
      "s" '(hydra-text-scale/body :which-key "scale text")

      "R" '(ivy-rich-mode :which-key "toggle ivy rich mode")
      "p" '(ivy-posframe-mode :which-key "toggle ivy posframe mode")

      "i" '(org-toggle-inline-images :which-key "toggle org inline images"))

    (bind-leader-key
      :infix "p"
      "" '(:ignore t :which-key "projects")
      "s" '(counsel-projectile-rg :which-key "search project")
      "v" '(projectile-edit-dir-locals :which-key "edit project dir locals")
      "d" '(projectile-dired :which-key "project dired")
      "p" '(projectile-switch-project :which-key "switch project")
      "f" '(projectile-find-file :which-key "find project file")
      "T" '(projectile-add-to-treemacs :which-key "add current project to treemacs"))

    (bind-leader-key
      :infix "g"
      "" '(:ignore t :which-key "git")
      "g" '(magit-status :which-key "git status")
      "c" '(hydra-merge-conflicts/body :which-key "merge conflicts")
      "b" '(magit-blame-addition :which-key "blame")

      "s" '(diff-hl-diff-goto-hunk :which-key "show current hunk diff")
      "r" '(diff-hl-revert-hunk :which-key "revert current hunk")
      "n" '(diff-hl-next-hunk :which-key "next hunk")
      "p" '(diff-hl-previous-hunk :which-key "previous hunk"))

    (bind-leader-key
      :infix "s"
      "" '(:ignore t :which-key "search/spelling")
      "s" '(swiper :which-key "swiper")
      "S" '(swiper-thing-at-point :which-key "swiper thing at point")
      "c" '(evil-ex-nohighlight :which-key "clear highlight")

      "d" '(ispell-change-dictionary :which-key "change dictionary")
      "w" '(flyspell-auto-correct-word :which-key "auto-correct word")
      "W" '(ispell-word :which-key "correct word"))

    (bind-leader-key
      :infix "h"
      "" '(:ignore t :which-key "help")
      "v" '(describe-variable :which-key "describe variable")
      "f" '(describe-function :which-key "describe function")
      "k" '(describe-key :which-key "describe key"))

    (bind-leader-key
      :infix "l"
      "" '(:ignore t :which-key "lisp")
      "e" '(eval-last-sexp :which-key "eval last sexp")
      "p" '(check-parens :which-key "check parens"))

    (bind-leader-key
      :infix "o"
      "" '(:ignore t :which-key "org")
      "a" '(org-agenda :which-key "org agenda")
      "s" '(org-schedule :which-key "org schedule")
      "d" '(org-deadline :which-key "org deadline")
      "t" '(org-todo :which-key "org todo")
      "e" '(org-edit-src-code :which-key "org edit code")
      "r" '(org-babel-execute-src-block :which-key "org execute code")
      "i" '(org-display-inline-images :which-key "org display inline images"))

    (bind-leader-key
      :infix "w"
      "" '(:ignore t :which-key "windows/workspaces")
      "j" '(evil-window-down :which-key "move to window below")
      "k" '(evil-window-up :which-key "move to window above")
      "h" '(evil-window-left :which-key "move to window on the left")
      "l" '(evil-window-right :which-key "move to window on the right")
      "d" '(evil-window-delete :which-key "delete window")
      "s" '(evil-window-split :which-key "horizontal split")
      "v" '(evil-window-vsplit :which-key "vertical split")
      "m" '(delete-other-windows :which-key "maximize window")

      "w" '(eyebrowse-last-window-config :which-key "last workspace")
      "W" '(eyebrowse-switch-to-window-config :which-key "switch workspace")
      "n" '(eyebrowse-next-window-config :which-key "next workspace")
      "p" '(eyebrowse-prev-window-config :which-key "previous workspace")
      "r" '(eyebrowse-rename-window-config :which-key "rename workspace")
      "c" '(eyebrowse-close-window-config :which-key "close workspace"))

    (bind-mode-key
      :keymaps 'org-mode-map
      "t" '(org-todo :which-key "org todo")
      "c" '(:ignore t :which-key "clock")
      "ci" '(org-clock-in :which-key "org clock in")
      "co" '(org-clock-out :which-key "org clock out")
      "e" '(org-edit-src-code :which-key "org edit source")
      "s" '(org-schedule :which-key "org schedule")
      "d" '(org-deadline :which-key "org deadline")
      "r" '(org-babel-execute-src-block :which-key "org execute code")
      "i" '(org-display-inline-images :which-key "org display inline images"))

    (bind-mode-key
      :keymaps 'LaTeX-mode-map
      "e" '(LaTeX-environment :which-key "environment")
      "s" '(LaTeX-section :which-key "section")
      "i" '(LaTeX-insert-item :which-key "insert item")
      "C" '(TeX-command-master :which-key "compile")
      "c" '((lambda () (interactive) (TeX-command "LaTeX" 'TeX-main-file))
	    :which-key "compile main file")
      "M" '(LaTeX-math-mode :which-key "math mode")
      "f" '(TeX-font :which-key "font")

      "m" '(:ignore t :which-key "math")
      "mf" '(LaTeX-math-frac :which-key "fraction"))

    (bind-mode-key
      :keymaps 'org-src-mode-map
      "s" '(org-edit-src-save :which-key "org source save")
      "e" '(org-edit-src-exit :which-key "org source exit")
      "a" '(org-edit-src-abort :which-key "org source abort")
      "k" '(org-edit-src-abort :which-key "org source abort")
      "q" '(org-edit-src-abort :which-key "org source abort"))

    (bind-leader-key
      :infix "a"
      "" '(:ignore t :which-key "applications")
      "d" '(dired :which-key "dired")
      "t" '(treemacs :which-key "treemacs"))

    (bind-leader-key
      :infix "e"
      "" '(:ignore t :which-key "edit/errors")
      "e" '(evil-iedit-state/iedit-mode :which-key "iedit mode"))

    (bind-leader-key
      :infix "j"
      "" '(:ignore t :which-key "jump")
      "j" '(avy-goto-char-2 :which-key "jump to char 2")
      "w" '(avy-goto-word-1 :which-key "jump to word")
      "r" '(avy-resume :which-key "resume jump")
      "h" '(avy-org-goto-heading-timer :which-key "jump to org heading")
      "n" '(avy-next :which-key "jump to next candidate")
      "p" '(avy-prev :which-key "jump to previous candidate")

      "c" '(avy-copy-region :which-key "jump, copy and paste")
      "m" '(avy-move-region :which-key "jump, cut and paste")

      "C" '(avy-copy-line :which-key "jump, copy and paste line")
      "M" '(avy-move-line :which-key "jump, cut and paste line"))
    )
  #+end_src

* Auto tangle this config on save

  Use =org-bable-tangle= to auto generate emacs configuration on save

  #+begin_src emacs-lisp
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/config.org"))
      (let ((org-config-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook #'org-babel-tangle-config)))
  #+end_src

* Post-init

  Make garbage collection pause faster by decreasing threshold

  #+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src


* Pending Configuration
** TODO Check use package and general integration
** TODO org wild notifier to show OS notifications
** TODO Check datetree
** TODO org capture templates (tables, datetrees, ...)
** TODO org habits
** TODO Why do I need to hit Escape in Org source mode to access "," bindings?
** DONE Fix whitespace highlight on mini buffer
   CLOSED: [2020-10-24 Sat 13:42]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-10-24 Sat 13:42]
   :END:
** DONE Why when I press C-j and there is only one match in company box, new line is inserted
   CLOSED: [2020-10-24 Sat 23:51]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-10-24 Sat 23:51]
   :END:

   This was caused by evil collection. I disabled it and binded the keys in company mode
   manually.
